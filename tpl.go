// Code generated by go-bindata.
// sources:
// tmpl/monitor.tmpl
// tmpl/timeboard.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplMonitorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x10\x3e\x6f\xf9\x05\xed\x61\x68\x33\x34\x87\x25\x58\x11\xa0\x87\x61\x10\x04\x8b\xb1\x85\x2a\x52\x2a\xcb\x31\x02\x8d\xff\x7d\xd0\x87\x1d\x3b\x75\x9a\x13\xf9\xf8\xde\x13\xc5\x50\xb6\xd8\x9a\xce\x56\x08\xa5\xe0\x8e\x0b\x53\xb3\xa3\xd1\xd2\x19\x5b\x42\xe9\x3d\xac\x36\x02\x88\x4a\xf0\x05\x80\xe6\x47\x84\xf9\xef\x31\x91\xb6\xa1\x42\x54\x16\x00\xee\x72\xba\x43\xda\x87\x4a\x22\x79\x0f\xf2\x00\xab\x3d\xaf\x5b\x20\x0a\xaa\x10\xdd\xaa\xfe\x78\x6f\xb9\xae\x31\x11\x89\x4a\xef\x57\x44\xe5\x37\xef\x51\x0b\xa2\xbf\xd1\xe8\x3b\xa0\x16\xc9\xe4\x88\x6d\xcb\x6b\x9c\x9b\x3c\x3c\xac\x77\xfb\x22\x9c\xff\x2b\x97\x89\x8a\x00\x01\x60\x5b\x71\xc5\x9d\x34\x9a\x0d\xd2\xdc\xea\xee\x14\xd0\x76\xb5\x1e\x19\x57\x71\x59\x14\x00\x1f\x1d\xda\x0b\x3c\x86\x8b\xac\x7e\xc7\xf8\x5f\xb4\x3b\xe1\x53\xc3\x2d\xaf\x1c\xda\x78\xb3\xdc\x62\x2f\x5d\x33\xba\xa6\x66\xf3\x08\xb6\xc6\xc9\xc3\x65\x6b\x9e\xb9\xe3\x40\xa4\x63\xca\xb4\x61\xe1\xdf\x48\x37\x88\x03\x9e\xd3\x66\xd7\xce\x4e\xaf\x98\xc4\x1b\xed\xd0\x9e\xb9\x02\x22\x9b\x21\x26\x07\x2c\xb9\x2d\x50\x61\xc9\x32\x9d\xfa\xa3\x13\xd2\x5d\x7b\xe3\x31\x9d\xb6\x35\x10\x96\x2c\xf6\xf2\x88\xa6\x73\x2f\x40\xe4\x52\xc8\x9a\x2c\x9e\x94\x96\x94\x1b\x5d\xa9\x4e\x60\xde\x11\x99\x32\x16\x17\x25\xe9\xa7\x84\xbb\x33\xf9\xe8\xa4\xc5\x9f\x9d\x52\x6f\x52\x0b\xd3\xc7\xa1\x44\x8c\x1d\x3a\xa5\x58\x9f\xd0\x61\x2c\x9f\xd9\x8b\x63\xc1\xfe\xc5\xb4\xee\x19\x15\xbf\x84\xb9\x60\xcf\x1a\xd3\x3a\x26\x22\x90\x27\x33\xe7\x2c\xd9\xac\xcf\x5c\x75\x71\xb9\x06\x16\x8e\xc8\xcc\xeb\x33\x71\x62\x97\x37\x2c\xce\xba\xb1\xd8\x36\x46\x89\x71\xc5\x86\xcd\xbb\xad\xb8\x6b\x1e\x1e\xf6\xd8\xd2\xee\x1d\x88\xcc\x7b\x3e\x37\x66\xb3\xce\x47\xe2\x1b\xb7\x5a\xea\x1a\x88\xfa\x1c\x25\xc9\x15\xff\x52\xf7\x8a\x95\x39\x87\x57\x33\xea\x99\x1d\xa0\x99\xd1\x84\xb8\x6c\xf8\x64\xa5\x93\x55\x5c\xe1\x6a\x08\x93\xc3\xa4\xf2\xb5\x74\x72\xc6\x60\x71\xdb\xcd\x02\x75\xe6\x49\xb7\x9f\xa2\x7b\x49\x41\xc5\xff\x00\x00\x00\xff\xff\x85\x80\x7d\xfd\x71\x05\x00\x00")

func tmplMonitorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMonitorTmpl,
		"tmpl/monitor.tmpl",
	)
}

func tmplMonitorTmpl() (*asset, error) {
	bytes, err := tmplMonitorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/monitor.tmpl", size: 1393, mode: os.FileMode(420), modTime: time.Unix(1532071166, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplTimeboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xcd\x6e\xdb\x30\x0c\xbe\xe7\x29\x08\xa3\x87\x0d\x68\xf2\x00\x03\x72\x28\x10\xac\x18\xb0\x9f\x2e\x2d\xb2\xc3\x30\x04\x4a\x44\x3b\xc2\x14\xdb\x95\xe5\xb4\xa9\xa0\x77\x1f\x44\xfd\x39\xae\x57\x0c\x58\x4e\xe2\xc7\x8f\xe2\x47\x9a\x8c\x14\x76\x4d\xaf\xf6\x08\x05\x67\x9a\xf1\xa6\xda\x6a\x71\xc4\x5d\xc3\x14\x2f\xa0\x30\x06\x16\x9f\x38\x58\x5b\x80\x99\x01\x68\xa1\x25\x82\xff\x2d\xbd\xf7\x81\x20\x6b\x8b\x19\x00\xc7\x6e\xaf\x44\xab\x45\x53\x47\xf7\x6a\x00\x79\x92\x42\xc6\xb7\x4d\x2d\xcf\x74\x87\xe3\xac\x91\xf1\x6f\x0e\xb0\x76\x06\x60\xcc\x93\xd0\x07\x58\xdc\x2a\xd6\x1e\x3a\x98\x07\x50\xb1\xba\x42\x58\x78\x4e\xe5\x7c\xa4\x28\x6a\x9a\x50\x93\xaf\x5a\x61\x29\x6a\x41\x1a\xfc\x75\x00\x27\xf1\x92\x6b\xd8\x88\x17\xe7\x88\x41\xa2\x84\xc5\x4d\xaf\x9b\x6e\xcf\x24\x3a\x07\x4b\x46\x08\xc8\x5e\x6b\x0b\x63\xe6\x80\x35\x0f\x17\xfb\xf0\x3b\x85\x7b\xd1\x85\x84\x6d\x32\x42\x78\xf6\xfe\x25\xfc\x56\x35\x7d\x4b\xb5\x57\xee\x04\x4b\xf8\x69\xcc\x55\xe5\xd1\x0f\xcb\x48\xb0\x36\xf6\xe5\x4a\xd4\x1c\x9f\xaf\xe1\x0a\x25\x1e\x47\x0c\x51\x06\xb7\xb5\xd7\xc6\x50\xaa\xc2\x18\x62\xd2\x89\x90\x5f\x53\x32\xee\xf7\x4d\x8b\x24\xa3\x73\xa7\x20\xa3\xf3\xa8\x4b\xe2\x09\x6f\xc9\xc8\x8c\xff\x90\xa1\xcf\xfe\x3b\x10\xd6\x91\xe5\xbf\x3d\x40\xcb\x24\x6a\x8d\x17\x23\x49\xfc\xc5\x5d\xf0\xc4\xef\x9a\xb8\xdb\x52\x8a\x76\x92\xfb\xd1\x39\x22\xdf\x8e\xa5\xcc\xc1\x89\xf9\xc2\xd4\x6f\x54\xd4\x14\x07\xf9\x01\xbb\x00\xc3\xa4\x86\xb8\x23\xb9\x92\x5e\x7d\x6e\x31\xef\x8e\x33\xb2\xbe\x13\x93\x7d\x1a\xb1\x0d\x19\xd9\x69\x0c\xa5\xff\xcc\x76\x28\x5d\x1e\x49\x87\x40\xf6\xe8\xab\x61\xca\x25\xbc\x3e\xa4\xa2\x7c\x05\x6b\x7c\xec\xb1\xd3\x93\x25\x28\xef\x4b\x35\x3c\x0e\x7a\xfd\xbd\x47\x75\xce\xcb\x93\x74\x52\x69\x73\x6b\xa9\xde\x51\xb9\x41\x03\x84\xeb\x53\xcc\x4d\x55\x29\xac\x98\x6e\x94\x57\xe1\xc0\x1a\xa1\x28\xe0\xdd\x0a\xd7\x58\xde\x6b\x25\xea\x6a\xc8\x7b\x4f\xdb\x99\xc3\xe2\x7a\x66\x64\xd8\x93\xcb\xda\x53\xda\x34\x5e\xb9\x1b\x97\x13\x37\x9e\xb9\xb4\xe4\x61\xc2\xdc\x8a\x87\x63\x5c\xf0\x3c\x7b\xe3\xa4\x31\xf8\x87\xe0\xfa\xe0\x42\x9f\xe8\x10\x02\x3d\xfa\x46\xd8\x3f\xf4\x35\xc5\xe4\x3a\x27\x1b\x90\x47\xe0\x72\x20\xa6\x2d\x1b\x36\x74\x88\xe5\x86\x3d\xe0\xb1\x95\x4c\xe3\x86\x29\xc1\x76\x12\xd3\x7e\x0c\xfe\xb6\xdd\xfb\x11\x68\xdb\x53\xe0\x85\x9e\xd6\xec\x88\x83\xa1\xfa\xea\xcc\x38\x52\xad\xc2\x52\x3c\xc3\xe0\xbf\xd3\x99\xd1\xcb\xb1\x64\xbd\xd4\xf9\xb9\xf1\xa6\x7b\xb0\x26\x45\xdb\xd9\x9f\x00\x00\x00\xff\xff\x64\x22\x23\x98\xf1\x06\x00\x00")

func tmplTimeboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplTimeboardTmpl,
		"tmpl/timeboard.tmpl",
	)
}

func tmplTimeboardTmpl() (*asset, error) {
	bytes, err := tmplTimeboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/timeboard.tmpl", size: 1777, mode: os.FileMode(420), modTime: time.Unix(1532121921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/monitor.tmpl": tmplMonitorTmpl,
	"tmpl/timeboard.tmpl": tmplTimeboardTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"monitor.tmpl": &bintree{tmplMonitorTmpl, map[string]*bintree{}},
		"timeboard.tmpl": &bintree{tmplTimeboardTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

