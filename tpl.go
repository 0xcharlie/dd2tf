// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tmpl/monitor.tmpl
// tmpl/screenboard.tmpl
// tmpl/timeboard.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplMonitorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcd\x6e\xdb\x3a\x10\x85\xf7\x7a\x8a\x81\xd6\xf7\xfa\x09\x92\x45\x91\xb8\x88\x17\xb5\xd1\xc0\x40\x16\x45\x41\x10\xe2\xd8\x22\x22\x93\x0e\x45\x59\x30\x58\xbe\x7b\xc1\x3f\x4b\x54\xe8\xd4\x2b\xf1\x9c\x33\x9f\x46\xa3\x91\x15\xf6\x72\x50\x0d\x42\xcd\xa8\xa6\x4c\x1e\xc9\x49\x0a\xae\xa5\xaa\xa1\x66\x8c\x18\x03\xab\x0d\x03\x6b\x6b\x30\x15\x80\xa0\x27\x84\xfc\xf7\x08\xb5\x0b\x6d\x9d\x63\x6d\x5d\x01\xe8\xeb\xf9\x4e\x68\xef\x9c\x10\x32\xe6\x7f\xe0\x07\x58\xed\xe9\xb1\x07\x6b\x5d\x99\xbb\x5a\x96\xfd\x32\x46\x51\x71\xc4\x10\xb4\xb6\x36\x66\x65\x6d\xfd\x9f\x31\x28\x98\xb5\xbf\x23\x09\x05\x0b\x90\x13\xf6\x3d\x3d\x62\x0e\x79\x78\x58\xef\xf6\x95\x6b\xe0\x47\xb4\xad\xad\x9c\x04\x80\x7d\x43\x3b\xaa\xb9\x14\x24\x95\xce\xf3\xbb\xb3\xb3\xfa\xd5\xfa\x16\x5b\x10\x2a\x80\x8f\x01\xd5\x15\x1e\xc1\xe5\x7f\xfa\xeb\x3f\x1e\x7b\xc6\xa7\x96\x2a\xda\x68\x54\xfe\x09\x63\xab\x23\xd7\xed\x0d\x1c\x9a\x4e\xb3\xd8\x4a\xcd\x0f\xd7\xad\x7c\xa6\x9a\x06\x47\x78\x85\x08\x49\xdc\xdb\x09\x4f\xe3\xa7\xfd\x29\x99\x4d\x21\x01\x5f\x31\x00\x36\x42\xa3\xba\xd0\x2e\xb8\x2a\xaa\x84\x27\x39\x40\xcb\xe9\x22\x38\xdc\xff\xdb\xc0\xb8\xce\x1a\xa5\x5e\x99\xf7\x38\xcb\x14\x49\x7b\x7e\x42\x39\xe8\x97\xb8\x03\xe1\x44\xda\xc8\xc8\xdd\x22\x60\x23\x9a\x6e\x60\x38\xed\x11\x0f\x02\xf1\xfb\x14\x30\xf3\xcc\x97\xe3\xfa\x18\xb8\xc2\xef\x43\xd7\xbd\x71\xc1\xe4\x98\xe6\xe5\x65\x72\x18\xba\x8e\x8c\xc1\x48\x13\x2b\x16\x94\x47\x86\xe3\x8b\xec\xf5\x33\x76\xf4\x1a\x67\x86\x23\x69\x65\xaf\x09\xf3\x5a\x9c\xda\xa7\x58\x91\xb6\xbe\xd0\x6e\xf0\x0b\x39\x4b\xe2\x4d\xcc\x90\xc5\xec\x8c\x3a\x7f\x1b\xad\xc2\xbe\x95\x1d\x9b\x6d\x66\x58\xd8\xa5\xa3\xa7\xb3\xfb\x63\x98\x10\xbb\xf7\x10\x00\x90\xef\xb1\x81\x49\xca\x9e\x65\xaa\x79\xa3\x4a\x70\x71\x4c\xf2\x18\x8f\xa1\x7a\x61\x7e\x8d\x78\xc5\x46\x5e\xdc\x37\x98\xa3\x88\x4a\x7a\xc6\x5c\xa6\xef\xb0\x9f\x14\xd7\xbc\x49\x1f\x04\x40\x93\xce\x01\xb6\xb4\xff\x41\x59\xde\x34\xd1\x96\x3d\xde\xcb\x67\xf8\xe2\x82\x94\x0e\x95\xad\xfe\x06\x00\x00\xff\xff\x86\xcb\x8f\x1a\xeb\x05\x00\x00")

func tmplMonitorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMonitorTmpl,
		"tmpl/monitor.tmpl",
	)
}

func tmplMonitorTmpl() (*asset, error) {
	bytes, err := tmplMonitorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/monitor.tmpl", size: 1515, mode: os.FileMode(420), modTime: time.Unix(1573573808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplScreenboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xdb\x72\xdb\x38\x12\x7d\xf7\x57\xa0\xf4\xbc\x71\xbe\x20\x0f\x8e\x9d\x8b\xab\xec\x8d\xd7\x72\x9c\xdd\x9d\x9a\x62\xc1\x64\x8b\x42\x99\x24\x14\x00\x94\x2d\x6b\xf8\xef\x53\xb8\x37\x28\xde\x32\x35\xe3\x17\x0b\xe7\x34\x4e\xe3\xd2\x6c\xdc\x04\x48\xde\x8a\x1c\xc8\xaa\xa0\x8a\x16\xbc\xcc\x64\x2e\x00\x9a\x27\x4e\x45\xb1\x22\xab\xa2\xc8\x8e\x47\x72\x7e\x5d\x90\xae\x5b\x91\xe3\x19\x21\x8a\xa9\x0a\xc8\x07\xb2\xd2\xf8\x83\x29\x74\xdd\xea\x8c\x90\xe3\xf1\x1d\x61\x1b\x72\x7e\x0f\xb4\xf8\xd6\x54\x07\xd2\x75\x67\x84\x08\xa0\x45\xc6\x75\xf1\x03\xd1\x35\x52\x56\xd7\x81\xa6\x88\x05\x2d\xb0\xde\x52\x01\x0e\x93\xf6\xb7\xad\x8b\x89\xc1\x9a\x0f\x50\xef\x2a\xaa\xe0\x91\x0a\x46\x9f\x2a\x90\x91\x7e\x61\x6a\x3b\x69\x20\x68\x53\x02\x39\xb7\x80\x72\x76\xd9\xde\x19\x9a\xae\x13\xd2\xd0\x1a\xf4\x7f\xd7\xfd\x7f\xeb\xa2\xed\x3d\x21\x3b\x01\x1b\xf6\x1a\xb8\x3b\x5b\xf4\x6c\x01\x1b\xda\x56\xca\xb3\x57\xae\xa8\x47\xf5\x8c\x90\xc1\x1e\x0d\x15\x92\xde\xfc\x60\x45\x09\x6a\xac\x0f\x2f\x86\x75\x0d\x57\x87\x5d\x9c\x34\xfd\xdb\xb7\xeb\xd5\xa3\xff\x0d\xd0\xc1\x43\xff\x0b\x50\x18\x60\x37\xdf\x56\xf3\x24\x12\x1e\xe0\x55\x25\x75\x42\x17\x7a\x12\x17\x15\x2b\x9b\x44\x27\xa3\x06\xc2\x6a\xde\x68\x5e\x6e\xcd\xde\xd2\x56\x65\x52\x23\x58\xcc\x99\x4c\x6a\x7d\x05\x56\x6e\x95\x47\xb7\xb6\xe4\x44\x02\x37\xa9\xf0\x83\x15\x6a\xeb\xc1\x17\x53\x70\xf5\x3d\x33\xdd\x19\x3b\x7e\xb6\x1f\xfa\xb7\xef\xc1\x82\x71\xbd\xe4\x15\x17\x1e\xcc\x4d\xc1\xd5\xf6\xcc\xcc\x38\xd6\x80\x31\xf7\xbd\x20\x54\xe9\xdf\x36\x9a\x08\xa9\xd8\x1e\x32\xb9\xa3\x61\xc6\x6e\xd8\x1e\xd6\xba\xec\xfd\x74\x63\xde\x06\x9d\x57\x70\x05\x9b\x21\xff\x09\xa1\x58\x05\x59\x01\x9b\xd0\x0c\x2f\xf0\xc8\xde\xbc\x0d\x21\x7b\xf6\xe6\x5b\x65\xf1\x15\xb2\x46\xde\xd1\xd8\xb5\x52\xf1\xfa\x7b\xc3\x54\xe4\x72\x83\x65\xad\x06\xfd\x40\x62\xb3\x59\xd1\x8b\x56\x71\x99\xd3\xf8\xbd\x10\x42\x03\xe4\x14\xb1\xcd\xac\xa0\x8e\x82\xe4\xc3\xb1\x41\xd2\xfb\x72\x90\xd1\xac\xe2\x3d\xfc\x6c\x41\xfa\x0c\x92\x0e\xfd\x30\x97\x64\x18\xfd\x27\xac\x59\x98\x91\x28\xfe\x9f\x16\xc4\x21\x1a\x12\xf2\xd3\xb7\xd1\x33\xab\xa4\x4e\xd2\x42\xd4\x6b\x9b\xad\x02\x3e\x9a\xc9\x66\x74\x8c\xd3\xbe\xd8\x4f\x0d\x66\x58\x12\x9b\x2d\xd2\xbd\x05\x25\x58\x8e\x99\xda\x22\x4e\x30\xf0\xcb\x7a\x0b\xaf\xea\x33\xab\x14\x88\xa4\xcf\x7a\x9a\x37\x16\x46\xf3\x1c\x0c\x17\x49\xdf\xb0\x1a\xc7\xb7\xfe\x86\xeb\x18\xdb\x9e\x5d\x24\x75\x51\x96\x02\x4a\xaa\x78\xd2\x4a\x1a\x51\x1f\xde\xd8\x6e\x91\xf2\x25\xaf\x77\x54\xc0\x03\xc7\x64\x6e\xc1\x4c\xf1\x98\xd2\xa2\xd9\x32\xdd\xad\x0e\xdc\xfe\xf4\xe7\x06\x4d\xe6\x3f\x31\x5c\x24\xfd\x4d\x14\x20\x3e\x26\x91\xce\x35\x94\x3d\x85\x85\x34\x9a\x2c\x57\xbc\x62\xe2\x54\xb2\x60\x22\xd1\xb4\x46\x8b\x44\x3f\xbd\x2a\x41\x2f\x79\x85\x39\xd0\x58\x96\xf3\xca\x8b\x22\xa3\x45\xa2\xd7\x4d\x2e\x80\x4a\xf8\xc2\x79\xc2\x33\x87\x67\xa5\x26\x9c\x78\xcf\x78\x61\x3c\x34\x05\x53\x8c\x37\xb4\xfa\xcc\x45\x4d\x71\x3e\xc2\xd9\x6a\xc0\xee\x5d\xcf\xf0\x24\x75\xe9\xc0\x0a\xb5\xb2\x8d\xa9\x86\xf2\xd8\xc8\xd2\xea\x6b\x8e\x2e\xb0\xa3\x7d\x8a\x82\x77\xb4\x02\xa5\x20\x25\x77\x0e\xf4\xfb\xc7\x60\xb3\x58\xd6\x7e\x15\xfd\xcf\xd2\x7f\x3f\xf8\xc3\x4c\x2c\x17\xeb\x5f\x37\x7b\x10\x2a\xe5\x98\xc5\xc2\x14\x3b\x8b\xc5\x9a\x8f\xb4\x6a\x7b\x03\xb1\x37\x90\x5f\xc1\x1d\xbf\xbc\x91\x35\x2d\xe1\xfb\xfd\x4d\xaf\x99\x1a\xcd\x5a\x11\x22\x1d\x99\xcd\x48\x77\x03\x71\x4a\xe6\x62\x77\x24\x9c\xd7\xea\x50\xc1\x70\x04\x9f\x50\xd2\x00\x43\xf1\xf8\x0f\x85\x4f\x3f\x3b\xce\xac\xb5\x33\x6a\xc9\x56\xd8\xfe\x4d\x6c\x88\xc7\x47\x9f\xbc\x7f\x6f\x46\xe2\x2f\x8e\xf8\x03\x2d\xed\x32\x99\x24\x0e\x45\x4b\xb7\x9e\x4a\xf2\x81\xfc\x76\x3c\xba\xe4\x10\xad\xbb\x6e\x75\x3c\x9e\x77\xdd\xea\x5f\xc7\x23\x34\x45\xd7\xfd\x3e\xee\x4d\xb7\xd1\xed\x83\xa6\x76\x5c\xf3\x80\xc9\xd3\x7b\x68\x92\xec\x15\x43\x64\x90\x3a\x49\x6b\xa0\xad\x50\xdc\x8c\x6e\xbb\x74\xb3\x8d\x71\xaf\x49\xef\x4e\x1a\x39\x8c\xf4\x1a\x7e\x4b\xc5\x73\x32\xcc\xb1\xe1\x83\xd4\x49\xc3\x6b\x63\x35\xb0\x93\xfc\xbb\xb6\x80\x37\xf4\x09\x92\xf5\xaf\x32\x80\xdf\x01\x39\x76\x91\xd4\x49\xda\x9a\x49\x5a\x83\x31\x33\x34\xf8\x8b\x23\x46\x0b\xf8\xf3\xd0\xd9\x00\x3f\x71\xc4\x4c\x8e\xcb\x7a\x6b\x99\x9c\x96\xa3\xc1\xe4\x81\x11\x9f\x96\xf0\x21\x29\x39\x1e\x8d\xd4\xbd\x13\x90\x33\xc9\x78\x38\xc9\xec\x02\x10\x6f\x4f\x82\xc5\xec\x91\x39\xbd\x4d\x58\x70\x24\x1a\xd1\xfa\xcc\x9b\x64\x6c\x36\xbc\x49\xc7\x06\x19\x4c\x0a\x5d\x54\x20\xd4\xf5\x95\x87\xa9\x2e\x66\x2c\x6c\x84\x22\x3d\xad\xd2\x2a\x7e\x0f\x1b\x01\x32\xe4\x51\x7d\x80\xcc\x84\xc3\xd0\x19\x32\x9a\x4d\x2a\xde\x40\x89\xd0\xca\x96\x7c\xf8\x7b\x6e\x81\x02\x1e\x24\xab\x92\x0c\x53\x62\x34\x29\x97\x9c\x11\xcd\x61\x6c\x38\x59\x8d\xc5\x60\x5c\xe6\xd1\xd2\x8e\x57\xf5\xb1\xcb\x92\x2d\xe4\xcf\xe1\xb2\xc4\x14\xc2\xfe\xdf\x32\x93\xd5\xbf\x08\xde\xee\x58\x53\x7a\xbc\xf4\x65\x27\x82\xf8\x79\x9d\x44\x24\x51\x98\xbf\xb3\xc9\x9f\xef\xb8\x8c\xb7\x23\xf9\x73\xb6\xe3\x32\xde\x7b\x79\x7a\x56\xe5\x53\x51\x42\x22\x03\x1a\x40\x3a\xce\x60\xfa\xfa\xec\xe1\x36\x4c\xc7\x56\xd5\x61\x3e\x1c\x3e\xdb\x08\xdc\x00\xec\x7b\xae\xee\xc7\x32\xc7\x1b\xf4\xa7\x32\xd9\x9c\x47\x76\x52\xc4\xac\xad\x38\xae\x4d\x72\x4e\xc2\x1a\x9b\x4c\x6a\xad\xd9\x1b\x0a\x0e\x69\x4b\x4e\x24\x70\x93\x0a\xb7\x54\x94\x2c\xa4\xb4\xda\x96\xfc\x85\x82\xe7\xa6\xfb\xd3\xec\x43\x4f\x9a\x7d\xe8\x82\x41\xa7\x1b\x0f\x62\xcf\x72\x70\xff\x42\x27\x6c\x31\x73\xff\x43\x6f\xfa\xc6\x4b\xa4\xdd\xad\x79\xa2\x6b\x2e\xd6\x53\xd1\xe4\x72\x7d\x7c\xa4\xe1\x11\x04\x5e\x4a\xf4\x8c\x65\x7b\x87\xc5\x41\x47\x66\xd3\x09\x8e\x1e\x78\xab\x7a\x9a\x95\x01\xfb\xaa\x7d\xd3\xe9\x19\x6d\xa5\x5a\x6f\xf9\xcb\x57\x16\x8f\xb0\x75\x2b\x55\x26\xb7\xfc\x25\xdb\x6a\xd4\xcf\x6f\x6a\xb9\x48\xf5\x93\x10\x5c\x0c\xe8\x82\xc5\x7b\xca\xc1\x7a\x91\xf6\x0d\x55\xd0\xe4\x87\x53\xf1\xca\x11\x3d\xf5\x68\xbf\x48\xfe\xa3\x00\xfa\x5c\xf0\x97\xe6\xd4\xc1\x53\xa0\x7a\x2e\x70\x9d\x45\x4e\xae\x98\x54\x82\x3d\xb5\x0a\x4d\x6a\xf4\x53\x60\xb6\xe7\xaa\x57\x73\x91\xb7\x7b\xf7\xa8\x76\xc3\xa4\x3a\xf5\xe6\x9f\xdc\xb2\x4a\xd3\x3d\x77\xbd\xaa\x93\xee\xae\x98\xdc\x55\xf4\x60\xef\x3b\x3c\x59\x58\xd0\x5f\x67\xf8\xe7\xa6\x9e\xe9\xfc\x4b\xc2\x9d\x80\x0d\x08\x68\x62\x0a\x30\x69\x34\xdb\x45\x1c\xdf\x7e\x24\xe6\xd3\xab\x04\x2b\xe0\xff\x20\xf8\x25\x6f\x9b\xf8\x29\x6c\x59\x01\xd9\x1b\x08\x9e\xe5\x16\xf7\x6b\x47\xdf\x7a\x26\x6d\x36\xb4\x84\xb5\xa2\xaa\x95\x7a\x34\x93\xe7\xaa\xda\x90\x99\x34\xac\x9d\x8a\xe4\x05\x6b\xac\xf2\x62\x8f\xf8\x09\x6c\xc0\xa3\x7d\x98\xc2\xcf\x3a\x63\x95\x7f\xcd\x23\x5e\xb4\x86\x3c\xe2\x25\x6c\xac\xf2\xaf\x79\x4c\xf6\xdb\x43\x2e\x93\xed\xf7\x68\xf5\xe9\x23\x02\x15\xb4\x96\x18\xb5\x47\xc9\x14\xdf\xd9\x52\xff\x39\x68\xcd\xf1\x35\x95\xe4\xf1\x82\xca\x31\x8b\xde\x5a\x22\x3a\xfa\x16\x37\xa1\x60\x22\x36\xc2\x26\xac\xe3\x27\x63\xb9\x59\x91\xb5\xa2\x49\x4f\x4c\xd1\x77\xc5\x71\x23\x22\xa3\xa7\xc0\xe1\x2f\xbe\xad\x1b\x89\xbe\x74\x53\xb4\xaf\xee\x9e\xfc\x83\x80\xcc\xe9\x0e\x2e\xb7\x54\xd0\x1c\xdf\xa8\x8c\x2d\xa5\xbc\x94\x10\x5a\x5f\xd9\x92\x5f\x3b\x3d\x37\x10\x04\xfa\x64\x6b\x1f\xaf\x27\x1e\xc2\xbb\xb3\x3f\x03\x00\x00\xff\xff\x98\x23\x1f\x57\xbb\x20\x00\x00")

func tmplScreenboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScreenboardTmpl,
		"tmpl/screenboard.tmpl",
	)
}

func tmplScreenboardTmpl() (*asset, error) {
	bytes, err := tmplScreenboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/screenboard.tmpl", size: 8379, mode: os.FileMode(420), modTime: time.Unix(1573573808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplTimeboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x6e\xdb\x38\x10\xbe\xfb\x29\x06\x42\x0e\xbb\x40\xec\x07\x58\x20\x87\x6c\x02\x07\x0b\x6c\xdb\x34\x09\xd2\x43\x51\x08\xb4\x34\x52\x88\x52\x3f\xa1\xa8\x24\x0e\xc1\x77\x2f\x38\xfc\x93\x6c\xc5\x3d\xd4\x27\xce\x37\xdf\xfc\x72\x86\x96\xc4\xa1\x1b\x65\x81\x90\x95\x4c\xb1\xb2\xab\x73\xc5\x1b\xdc\x75\x4c\x96\x19\x64\x65\x99\x6b\x0d\x9b\xff\x4a\x30\x26\x03\xbd\x02\x50\x5c\x09\x04\xf7\xbb\x80\xcc\x6a\x1f\x08\x32\x26\x5b\x01\x94\x38\x14\x92\xf7\x8a\x77\x6d\x50\x5f\x4f\x20\x47\x92\xc8\xca\xbc\x6b\xc5\x9e\x7c\x58\xce\x1d\xb2\xf2\x8b\x05\xd6\xc6\xac\x00\xb4\x7e\xe5\xea\x09\x36\x37\x92\xf5\x4f\x43\x04\x25\x6b\x6b\x84\x0d\x90\x58\x5b\x1d\xa5\x14\x92\x5a\x48\x27\xb9\xba\xc6\x8a\xb7\x9c\x92\x70\xee\x00\x5e\xf8\x7b\x2a\xe2\x91\xbf\x5b\x45\x30\x5a\x03\xaf\x60\x73\x39\xaa\x6e\x28\x98\x40\xab\x62\x51\xf0\x26\x49\x6b\x4c\x66\x4d\xb0\x2d\xbd\xeb\xe0\xe0\x56\x62\xc1\x07\x1f\xb4\x8f\x82\x77\x90\xb4\x1f\x3a\xb8\x91\xdd\xd8\x53\x07\x6a\x7b\x82\x0b\xf8\xae\xf5\x59\xed\xd0\x7f\x2e\x02\xc1\x98\xd0\x9d\x33\xde\x96\xf8\x76\x0e\x67\x28\xb0\x39\x60\xf0\xca\xab\x8d\x39\xd7\x9a\x82\x65\x5a\x13\x93\x4e\x84\xfc\x58\x4e\xe4\xbe\xe8\x7a\xa4\x44\x06\x7b\xf2\x89\x0c\x0e\xb5\x61\x1c\xe1\x54\x22\x89\xf1\x47\x89\xa8\xbd\xbb\x0f\x42\x07\x92\xdc\x14\x00\xf4\x4c\xa0\x52\x38\x9b\x4e\xe2\x6f\x6e\xbd\x26\xdc\x70\xe4\xe6\x95\xe0\xfd\x22\x77\x6b\x15\x81\x6f\x96\x93\xf9\xc4\xe4\x4f\x94\xd4\x16\x0b\xb9\x51\x9b\x81\x7e\x66\xbd\x5d\x43\xaa\x98\xaf\xda\xf7\x98\xd6\xc8\x0a\x29\xbf\x17\x26\xc6\x38\x6a\x8f\x24\x24\xa5\xd6\x14\xfe\x7f\xb6\x43\x61\xe3\x08\x3a\x78\xb2\x43\x8f\x46\x2a\x95\x70\x7c\x88\x45\xb9\x0a\xee\xf0\x79\xc4\x41\x2d\x96\x20\x9d\x2e\xd6\xf0\x3c\xe9\xf5\xd7\x11\xe5\x3e\xad\x51\xcc\x93\x4a\x5b\x1b\x43\xf5\x1e\x94\xab\xb5\x4d\x01\xbc\xf7\x68\x72\x59\xd7\x12\x6b\xa6\x3a\xe9\x92\xb0\x60\x8b\x90\x65\xf0\xd7\x35\xde\x61\x75\xaf\x24\x6f\xeb\x29\xef\x6f\x5a\xd2\x64\x16\xb6\x34\x21\x31\x1a\x39\xb4\x51\xd7\x87\x61\xe3\x74\x69\xed\x7b\xe1\x90\xc8\x9b\x0f\x9c\xb5\xa3\x3d\xf7\xe3\x65\xb7\xdc\x1f\xc3\x8e\xa7\xc1\x9b\x77\x3b\x19\x7f\xe3\xa5\x7a\xb2\xa6\xaf\x74\xf0\x86\x0e\x3d\x61\x76\xba\xa9\x73\x9b\x49\x95\xbe\xec\xd0\x88\xa8\x70\x03\x7d\xd5\xb5\x25\xbd\x92\x4c\x6c\x3b\xd9\x30\x35\xc0\x74\xb4\x3f\x54\x87\xa7\x39\x35\xb4\x48\xd4\xbc\x22\xee\xac\x6b\x30\x6d\xdb\xe9\xae\xcd\xe7\xc3\x7a\x6e\x7a\x26\xa7\x77\x7c\x95\x90\x34\x7b\xa9\xa8\xb0\x3d\xcb\x2b\x75\x1c\x20\x36\x63\x1c\x54\xd7\xfc\x5b\x5f\x75\x82\x3c\x17\x24\xe7\xbb\x3a\x2f\x08\x09\xd1\x0f\x68\xbf\xf5\xb8\x3d\xf4\x58\x2d\x7a\xdc\x7e\xec\x71\x7a\x6d\x4e\xb1\x74\x5a\x25\xea\xf1\xa6\x2f\x4b\xc6\x3f\xbe\x53\x2c\x5d\xff\x03\x36\xbd\x60\x0a\x1f\x99\xe4\x6c\x27\x30\x3e\x7c\x93\x7f\x66\xfb\x8d\xe0\x69\xf9\x8b\xe7\xf9\x9b\x6f\x59\x83\x93\xd7\xe2\xb3\x15\xc3\x7d\xf5\x12\x2b\xfe\x06\x93\xbf\x46\x2b\x06\x6d\x89\x15\x1b\x85\x4a\x9f\x14\x4e\xb4\x1f\x25\x8b\x49\x9b\xd5\xaf\x00\x00\x00\xff\xff\x3e\x48\x4e\x5f\xd8\x08\x00\x00")

func tmplTimeboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplTimeboardTmpl,
		"tmpl/timeboard.tmpl",
	)
}

func tmplTimeboardTmpl() (*asset, error) {
	bytes, err := tmplTimeboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/timeboard.tmpl", size: 2264, mode: os.FileMode(420), modTime: time.Unix(1573573808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/monitor.tmpl":     tmplMonitorTmpl,
	"tmpl/screenboard.tmpl": tmplScreenboardTmpl,
	"tmpl/timeboard.tmpl":   tmplTimeboardTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"monitor.tmpl":     &bintree{tmplMonitorTmpl, map[string]*bintree{}},
		"screenboard.tmpl": &bintree{tmplScreenboardTmpl, map[string]*bintree{}},
		"timeboard.tmpl":   &bintree{tmplTimeboardTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
