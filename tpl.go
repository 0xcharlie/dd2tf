// Code generated by go-bindata.
// sources:
// tmpl/monitor.tmpl
// tmpl/timeboard.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplMonitorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x10\x3e\x6f\xf9\x05\xed\x61\x68\x33\x34\x87\x25\x58\x11\xa0\x87\x61\x10\x04\x8b\xb1\x85\x2a\x52\x2a\xcb\x31\x02\x8d\xff\x7d\xd0\x87\x1d\x3b\x75\x9a\x13\xf9\xf8\xde\x13\xc5\x50\xb6\xd8\x9a\xce\x56\x08\xa5\xe0\x8e\x0b\x53\xb3\xa3\xd1\xd2\x19\x5b\x42\xe9\x3d\xac\x36\x02\x88\x4a\xf0\x05\x80\xe6\x47\x84\xf9\xef\x31\x91\xb6\xa1\x42\x54\x16\x00\xee\x72\xba\x43\xda\x87\x4a\x22\x79\x0f\xf2\x00\xab\x3d\xaf\x5b\x20\x0a\xaa\x10\xdd\xaa\xfe\x78\x6f\xb9\xae\x31\x11\x89\x4a\xef\x57\x44\xe5\x37\xef\x51\x0b\xa2\xbf\xd1\xe8\x3b\xa0\x16\xc9\xe4\x88\x6d\xcb\x6b\x9c\x9b\x3c\x3c\xac\x77\xfb\x22\x9c\xff\x2b\x97\x89\x8a\x00\x01\x60\x5b\x71\xc5\x9d\x34\x9a\x0d\xd2\xdc\xea\xee\x14\xd0\x76\xb5\x1e\x19\x57\x71\x59\x14\x00\x1f\x1d\xda\x0b\x3c\x86\x8b\xac\x7e\xc7\xf8\x5f\xb4\x3b\xe1\x53\xc3\x2d\xaf\x1c\xda\x78\xb3\xdc\x62\x2f\x5d\x33\xba\xa6\x66\xf3\x08\xb6\xc6\xc9\xc3\x65\x6b\x9e\xb9\xe3\x40\xa4\x63\xca\xb4\x61\xe1\xdf\x48\x37\x88\x03\x9e\xd3\x66\xd7\xce\x4e\xaf\x98\xc4\x1b\xed\xd0\x9e\xb9\x02\x22\x9b\x21\x26\x07\x2c\xb9\x2d\x50\x61\xc9\x32\x9d\xfa\xa3\x13\xd2\x5d\x7b\xe3\x31\x9d\xb6\x35\x10\x96\x2c\xf6\xf2\x88\xa6\x73\x2f\x40\xe4\x52\xc8\x9a\x2c\x9e\x94\x96\x94\x1b\x5d\xa9\x4e\x60\xde\x11\x99\x32\x16\x17\x25\xe9\xa7\x84\xbb\x33\xf9\xe8\xa4\xc5\x9f\x9d\x52\x6f\x52\x0b\xd3\xc7\xa1\x44\x8c\x1d\x3a\xa5\x58\x9f\xd0\x61\x2c\x9f\xd9\x8b\x63\xc1\xfe\xc5\xb4\xee\x19\x15\xbf\x84\xb9\x60\xcf\x1a\xd3\x3a\x26\x22\x90\x27\x33\xe7\x2c\xd9\xac\xcf\x5c\x75\x71\xb9\x06\x16\x8e\xc8\xcc\xeb\x33\x71\x62\x97\x37\x2c\xce\xba\xb1\xd8\x36\x46\x89\x71\xc5\x86\xcd\xbb\xad\xb8\x6b\x1e\x1e\xf6\xd8\xd2\xee\x1d\x88\xcc\x7b\x3e\x37\x66\xb3\xce\x47\xe2\x1b\xb7\x5a\xea\x1a\x88\xfa\x1c\x25\xc9\x15\xff\x52\xf7\x8a\x95\x39\x87\x57\x33\xea\x99\x1d\xa0\x99\xd1\x84\xb8\x6c\xf8\x64\xa5\x93\x55\x5c\xe1\x6a\x08\x93\xc3\xa4\xf2\xb5\x74\x72\xc6\x60\x71\xdb\xcd\x02\x75\xe6\x49\xb7\x9f\xa2\x7b\x49\x41\xc5\xff\x00\x00\x00\xff\xff\x85\x80\x7d\xfd\x71\x05\x00\x00")

func tmplMonitorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMonitorTmpl,
		"tmpl/monitor.tmpl",
	)
}

func tmplMonitorTmpl() (*asset, error) {
	bytes, err := tmplMonitorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/monitor.tmpl", size: 1393, mode: os.FileMode(420), modTime: time.Unix(1529246191, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplTimeboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xdd\x6a\x1b\x3d\x10\xbd\xf7\x53\x0c\x8b\x2f\x63\x3f\xc0\x07\xbe\x08\x84\x2f\x14\xfa\x93\xa6\xc1\xbd\x28\xc5\xc8\xd6\xec\x5a\x54\xde\x55\xb4\x5a\x27\x8e\xd0\xbb\x17\x8d\xfe\xd6\xf6\x36\x14\xea\x2b\xcd\x39\x67\xa4\x33\xd2\x8c\x57\x63\xdf\x0d\x7a\x87\x50\x71\x66\x18\xef\x9a\x8d\x11\x07\xdc\x76\x4c\xf3\x0a\x2a\x6b\x61\xf9\x81\x83\x73\x15\xd8\x19\x80\x11\x46\x22\x84\xdf\x2a\xb0\x4f\x04\x39\x57\xcd\x00\x38\xf6\x3b\x2d\x94\x11\x5d\x9b\xe8\xbb\x11\x14\x44\x1a\x19\xdf\x74\xad\x3c\xd1\x1e\x5e\xf3\x88\x8c\x7f\xf1\x80\x73\x33\x00\x6b\x5f\x84\xd9\xc3\xf2\x5e\x33\xb5\xef\x61\x11\x41\xcd\xda\x06\x61\x19\x34\x8d\xe7\xc8\x51\xf2\x34\xe1\xa6\x6c\x75\x87\xb5\x68\x05\x79\x08\xdb\x01\x1c\xc5\x5b\xa9\x61\x2d\xde\x3c\x91\x92\x44\x0d\xcb\xdb\xc1\x74\xfd\x8e\x49\xf4\x04\xcb\x41\x4c\x28\xac\x73\x95\xb5\x0b\xc0\x96\xc7\x8d\x43\xfa\x83\xc6\x9d\xe8\xe3\x81\x2a\x07\x31\xbd\xb0\x7f\x48\xbf\xd7\xdd\xa0\xa8\xf6\xc6\xaf\x60\x05\x3f\xac\x9d\x37\x01\xfd\x6f\x95\x04\xce\xa5\x7b\x99\x8b\x96\xe3\xeb\x0d\xcc\x51\xe2\xe1\x42\x21\xea\x48\x3b\x77\x63\x2d\x1d\x55\x59\x4b\x4a\x5a\x11\xf2\x73\xca\xc6\xb7\x5d\xa7\x90\x6c\xf4\x7e\x15\x6d\xf4\x01\xf5\x87\x04\xc1\x7b\x36\x8a\xe2\x1f\x6c\x98\x53\x78\x07\xc2\x7a\x8a\xc2\xdb\x03\x28\x26\xd1\x18\x3c\x6b\x49\xd2\x2f\x1f\x22\x93\xde\x35\x6b\x37\xb5\x14\x6a\x52\xfb\xbf\x27\x92\xde\x5d\x5a\x59\x80\x37\xf3\x89\xe9\x5f\xa8\xe9\x52\x3c\x14\x1a\xec\x0c\x8c\x9d\x1a\xf3\x0e\x44\x65\xbf\xe6\xa4\xb0\xcc\x8e\x0f\x8a\xbf\x23\x93\x43\x6e\xb1\x35\x05\x85\xb4\x96\x8e\xff\xc8\xb6\x28\xfd\x39\x92\x16\x51\x1c\xd0\xab\x66\x2a\x25\x5c\x2f\x72\x51\xa1\x82\x47\x7c\x1e\xb0\x37\x93\x25\xe8\xc0\xe5\x1a\x9e\x47\x77\xfd\x75\x40\x7d\x2a\xc3\x93\x7d\x52\x69\x0b\xe7\xa8\xde\x8b\x72\xa3\x07\x88\xdb\xe7\x9c\xdb\xa6\xd1\xd8\x30\xd3\x69\x1a\xba\x12\xa5\xa9\x2b\xc8\x55\xa9\x79\x93\xdc\x2c\xa5\xb6\xf3\xfe\xb9\xec\xa0\x3c\xb2\xb1\x5f\xfc\xc0\xc6\x65\x1a\xd7\xd2\x49\x97\x87\xa6\xe4\xef\x82\x9b\xbd\x4f\x7d\xa1\x45\x4c\x0c\xe8\x3b\x69\x7f\x71\x4b\x39\xa7\xd4\x39\xf9\x94\xe5\x41\xcf\x9f\x77\x3a\x72\x71\xde\xc6\x58\xb9\xb0\x27\x3c\x28\xc9\x0c\xae\x99\x16\x6c\x2b\x31\x77\xfb\xe8\x4f\xd8\x7f\x0d\xa2\x6c\x73\x8c\xba\x78\xa7\x2d\x3b\xe0\xa8\x45\x3e\xfb\x30\x35\x88\xd2\x58\x8b\x57\x18\xfd\x13\xfa\x30\xb1\x1c\x6b\x36\x48\x53\x3e\x1e\x21\xf4\x9f\x9f\x49\xd3\x6e\xf6\x3b\x00\x00\xff\xff\x01\x64\x7e\x13\xbf\x06\x00\x00")

func tmplTimeboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplTimeboardTmpl,
		"tmpl/timeboard.tmpl",
	)
}

func tmplTimeboardTmpl() (*asset, error) {
	bytes, err := tmplTimeboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/timeboard.tmpl", size: 1727, mode: os.FileMode(420), modTime: time.Unix(1528826644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/monitor.tmpl": tmplMonitorTmpl,
	"tmpl/timeboard.tmpl": tmplTimeboardTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"monitor.tmpl": &bintree{tmplMonitorTmpl, map[string]*bintree{}},
		"timeboard.tmpl": &bintree{tmplTimeboardTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

