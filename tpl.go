// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tmpl/monitor.tmpl
// tmpl/screenboard.tmpl
// tmpl/timeboard.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplMonitorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcf\x6e\xe2\x30\x10\xc6\xef\x79\x8a\x51\xce\xbb\x3c\x41\x39\xac\x5a\x56\xe5\xb0\xa0\xad\x90\x7a\x58\xad\x2c\x2b\x1e\x88\xd5\x60\x53\xc7\x21\x42\x5e\xbf\xfb\xca\xff\x20\x4e\x4d\xcb\x29\xfe\xbe\x6f\x7e\x99\x4c\x26\x28\xec\xe5\xa0\x1a\x84\x9a\x51\x4d\x99\x3c\x90\xa3\x14\x5c\x4b\x55\x43\xcd\x18\x31\x06\x16\x6b\x06\xd6\xd6\x60\x2a\x00\x41\x8f\x08\xf9\x6f\x09\xb5\x0b\x6d\x9c\x63\x6d\x5d\x01\xe8\xcb\xe9\x4e\x68\xe7\x9c\x10\x32\xe6\x3b\xf0\x3d\x2c\x76\xf4\xd0\x83\xb5\xae\xcc\x5d\xcd\xcb\xfe\x18\xa3\xa8\x38\x60\x08\x5a\x5b\x1b\xb3\xb0\xb6\xfe\x66\x0c\x0a\x66\xed\xdf\x48\x42\xc1\x02\xe4\x88\x7d\x4f\x0f\x98\x43\x1e\x1e\x56\xdb\x5d\xe5\x1a\xf8\x15\x6d\x6b\x2b\x27\x01\x60\xdf\xd0\x8e\x6a\x2e\x05\x49\xa5\xd3\xfc\xf6\xe4\xac\x7e\xb1\xba\xc6\x66\x84\x0a\xe0\x7d\x40\x75\x81\x25\xb8\xfc\x6f\x7f\xfd\xcf\x63\x4f\xf8\xd8\x52\x45\x1b\x8d\xca\x3f\x61\x6c\x75\xe4\xba\xbd\x82\x43\xd3\x69\x16\x1b\xa9\xf9\xfe\xb2\x91\x4f\x54\xd3\xe0\x08\xaf\x10\x21\x89\x7b\x3b\xe1\x69\xfc\xb4\x3f\x24\xb3\x29\x24\xe0\x0b\x06\xc0\x5a\x68\x54\x67\xda\x05\x57\x45\x95\xf0\x24\x07\x68\x39\x5d\x04\x87\xfb\xff\x18\x18\xd7\x59\xa3\xd4\x2b\xd3\x1e\x27\x99\x22\x69\xc7\x8f\x28\x07\xfd\x1c\x77\x20\x9c\x48\x1b\x19\xb9\x5b\x04\xac\x45\xd3\x0d\x0c\x6f\x7b\xc4\x83\x40\xfc\x3e\x05\xcc\x34\xf3\xe9\xb8\xde\x07\xae\xf0\xe7\xd0\x75\xaf\x5c\x30\x39\xa6\x79\x79\x99\xec\x87\xae\x23\x63\x30\xd2\xc4\x8a\x05\xe5\x91\xe1\xf8\x2c\x7b\xfd\x84\x1d\xbd\xc4\x99\xe1\x48\x5a\xd9\x6b\xc2\xbc\x16\xa7\xf6\x21\x56\xa4\xad\xce\xb4\x1b\xfc\x42\x4e\x92\x78\x15\x33\x64\x31\x3b\xa1\x4e\xdf\x46\xab\xb0\x6f\x65\xc7\x26\x9b\x19\x16\x76\xee\xe8\xdb\x79\xe9\xff\x1a\x6e\x90\xed\x5b\x88\x00\xc8\xb7\xd8\xc2\x4d\xca\x9e\xe6\x56\xf3\x4a\x95\xe0\xe2\x90\xe4\x31\x1e\x43\xf5\xcc\xfc\x1c\xf1\x82\x8d\x3c\xbb\xaf\x30\x47\x11\x95\xf4\x8c\x39\x4f\xdf\x61\x3f\x2a\xae\x79\x93\x3e\x09\x80\x26\x9d\x03\x6c\x6e\x7f\x41\x99\xdf\x34\xd1\xe6\x3d\xde\xcb\x67\xf8\xe2\x8a\x94\x0e\x95\xad\xfe\x07\x00\x00\xff\xff\x41\xd6\x1b\xf0\xed\x05\x00\x00")

func tmplMonitorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMonitorTmpl,
		"tmpl/monitor.tmpl",
	)
}

func tmplMonitorTmpl() (*asset, error) {
	bytes, err := tmplMonitorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/monitor.tmpl", size: 1517, mode: os.FileMode(420), modTime: time.Unix(1573631928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplScreenboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xdb\x72\xdb\x38\x12\x7d\xf7\x57\xa0\xf4\xbc\x71\xbe\x20\x0f\x8e\x9d\x8b\xab\xec\x8d\xd7\x72\x9c\xdd\x9d\x9a\x62\xc1\x64\x8b\x42\x99\x24\x14\x00\x94\x2d\x6b\xf8\xef\x53\xb8\x37\x28\xde\x32\x35\xe3\x17\x0b\xe7\x34\x0e\x1a\x40\xb3\x71\x13\x20\x79\x2b\x72\x20\xab\x82\x2a\x5a\xf0\x32\x93\xb9\x00\x68\x9e\x38\x15\xc5\x8a\xac\x8a\x22\x3b\x1e\xc9\xf9\x75\x41\xba\x6e\x45\x8e\x67\x84\x28\xa6\x2a\x20\x1f\xc8\x4a\xe3\x0f\xa6\xd0\x75\xab\x33\x42\x8e\xc7\x77\x84\x6d\xc8\xf9\x3d\xd0\xe2\x5b\x53\x1d\x48\xd7\x9d\x11\x22\x80\x16\x19\xd7\xc5\x0f\x44\xd7\x48\x59\x5d\x07\x9a\x22\x16\xb4\xc0\x7a\x4b\x05\x38\x4c\xda\xdf\xb6\x2e\x26\x06\x6b\x3e\x40\xbd\xab\xa8\x82\x47\x2a\x18\x7d\xaa\x40\x46\xfa\x85\xa9\xed\xa4\x81\xa0\x4d\x09\xe4\xdc\x02\xca\xd9\x65\x7b\x67\xa8\x3d\x38\x23\x84\x90\x86\xd6\xa0\xff\xbb\x01\xf8\xb7\x2e\xda\xfe\x13\xb2\x13\xb0\x61\xaf\x81\xbb\xb3\x45\xcf\x16\xb0\xa1\x6d\xa5\x3c\x7b\xe5\x8a\x7a\x5c\xcf\x08\x19\xec\xd3\x50\x21\xe9\xcf\x0f\x56\x94\xa0\xc6\x7a\xf1\x62\xd8\xe0\xba\x3a\xec\xe2\xc4\xe9\xdf\xde\xb3\x57\x8f\xfe\x37\x40\x07\x0f\xfd\x2f\x40\x61\x90\xdd\x9c\x5b\xcd\x93\x68\x78\x80\x57\x95\xd4\x09\x9d\xe8\x49\x5c\x54\xac\x6c\x12\x9d\x8c\x1a\x08\xab\x79\xa3\x79\xb9\x35\x7b\x4b\xbd\xca\xa4\x46\xb0\x98\x33\x99\xd4\xfa\x0a\xac\xdc\x2a\x8f\x6e\x6d\xc9\x89\x04\x6e\x52\xe1\x07\x2b\xd4\xd6\x83\x2f\xa6\xe0\xea\x7b\x66\xba\x33\x76\xfc\x6c\x3f\xf4\x6f\xdf\x83\x05\xe3\x7a\xc9\x2b\x2e\x3c\x98\x9b\x82\xab\xed\x99\x99\x71\xac\x01\x63\xee\x9b\x41\xa8\xd2\xbf\x7d\x3c\x11\x52\xb1\x3d\x64\x72\x47\xc3\x9c\xdd\xb0\x3d\xac\x75\xd9\xb7\xd4\x8d\xb5\x37\xd8\x7c\x05\x57\xb0\x19\xf2\x20\x21\x14\xab\x20\x2b\x60\x83\x1c\xf1\x12\x8f\xec\xcd\x5b\x11\xb2\x67\x6f\xde\x2f\x8b\xaf\x90\x35\x6a\x1f\x8d\x5f\x2b\x15\xaf\xbf\x37\x4c\x45\x2e\x37\x58\xd6\x6a\xd0\x0f\x26\x36\x9b\x15\xbd\x68\x15\x97\x39\x8d\xdf\x0c\x21\x34\x40\x4e\x11\xdb\xcc\x0a\xea\x48\x48\x3e\x1e\x1b\x28\xbd\xaf\x07\x19\xcd\x2a\xde\xc3\xcf\x16\xa4\xcf\x23\xe9\xe0\x0f\x73\x49\x9e\xd1\x7f\xc2\x9a\xa1\x39\x89\xf2\xff\x69\x41\x1c\xa2\x29\x21\x3f\xbd\x97\x9e\x59\x25\x75\x12\x1f\x51\xbf\x6d\xce\x0a\xf8\x68\x3e\x9b\xd1\x31\x8d\xf6\xc5\x7e\x6a\x30\xc3\x92\xd8\x6c\x91\xee\x2d\x28\xc1\x72\xcc\xd4\x16\x71\x82\x81\x5f\xd6\x5b\x78\x55\x9f\x59\xa5\x40\x24\x7d\xd6\x13\xbd\xb1\x30\x9a\xe9\x60\xb8\x48\xfa\x86\xd5\x38\xc2\xf5\x77\x5c\xc7\xe8\xf6\xec\x22\xa9\x8b\xb2\x14\x50\x52\xc5\x13\x2f\x69\x44\x7d\x80\x63\xbb\x45\xca\x97\xbc\xde\x51\x01\x0f\x1c\x93\xb9\x05\x33\xc5\x63\x62\x8b\x66\xcb\x74\xb7\x3a\x74\xfb\xd3\x9f\x1b\x34\x99\xff\xc4\x70\x91\xf4\x37\x51\x80\xf8\x98\x44\x3a\xd7\x50\xf6\x14\x96\xd3\x68\xb2\x5c\xf1\x8a\x89\x53\xc9\x82\x89\x44\xd3\x1a\x2d\x12\xfd\xf4\xaa\x04\xbd\xe4\x15\xe6\x40\x63\x59\xce\x2b\x2f\x8a\x8c\x16\x89\x5e\x37\xb9\x00\x2a\xe1\x0b\xe7\x09\xcf\x1c\x9e\x95\x9a\x70\xe2\x3d\xe3\x85\xf1\xd0\x14\x4c\x31\xde\xd0\xea\x33\x17\x35\xc5\x19\x09\xe7\xab\x01\xbb\x77\x3d\xc3\x93\xe4\xa5\x03\x2b\xd4\xca\x36\xa6\x5a\x92\xc9\x46\x96\x58\x5f\x77\x74\xa1\x1d\xed\x55\x14\xbc\xa3\x15\x28\x05\x29\xb9\x73\xa0\xdf\x49\x06\x9b\xc5\xb2\xf6\xbb\xe8\x7f\x98\xfe\x0b\xc2\x9f\x66\x62\xb9\x58\xff\xba\xd9\x83\x50\x29\xc7\x2c\x16\x26\xd9\x59\x2c\xd6\x7c\xa4\x55\xdb\x1b\x88\xbd\x81\xfc\x2a\xee\xf8\xe5\x4e\xd6\xb4\x84\xef\xf7\x37\x3d\x37\x35\x9a\xb5\x22\xc4\x3a\x32\x9b\x91\xee\x06\x22\x95\xcc\x45\xef\x48\x40\xaf\xd5\xa1\x82\xe1\x18\x3e\xa1\xa4\x01\x86\x23\xf2\x1f\x0a\xa0\x7e\x86\x9c\x59\x6f\x67\xd4\x92\x4d\xb1\xfd\x9b\xd8\x1a\x8f\x8f\x3f\x79\xff\xde\x8c\xc5\x5f\x1c\xf3\x07\x5a\xda\xa5\x32\x49\x1e\x8a\x96\x6e\x4d\x95\xe4\x03\xf9\xed\x78\x74\x09\x22\x5a\x77\xdd\xea\x78\x3c\xef\xba\xd5\xbf\x8e\x47\x68\x8a\xae\xfb\x7d\xbc\x35\xed\xa3\xdb\x0d\x4d\xed\xbb\xe6\x01\x93\xab\xf7\xd0\x24\x19\x2c\x06\xc9\x20\x75\x92\xda\x40\x5b\x25\x91\x33\xba\xf9\xd2\x8e\x1b\xf3\x9e\x53\xef\x4e\xdc\x1c\x46\x7a\xae\xdf\x52\xf1\x9c\x0c\x74\x74\x7d\x90\x3a\x71\xbd\x36\x56\x83\x3b\xca\xbf\x6b\x2b\x78\x43\x9f\x20\x59\x07\x2b\x03\xf8\x9d\x90\x63\x17\x49\x9d\x24\xaf\x99\xd4\x35\x18\x37\x43\xc3\xbf\x38\x6a\xb4\x80\x3f\x1b\x9d\x0d\xf0\x13\x07\xce\xe4\xf0\xac\xb7\x98\xc9\xd9\x39\x1a\x4c\x1e\x1f\xf1\xb9\x09\x1f\x97\x92\x83\xd2\x48\xdd\x3b\x01\x39\x93\x8c\x87\x33\xcd\x2e\x00\xf1\x36\x25\x58\xcc\x1e\xa0\xd3\xbb\x85\x05\x87\xa3\x11\xad\xcf\xbc\x49\xc6\x66\xc3\x9b\x74\x6c\x90\xc1\xa4\xd0\x45\x05\x42\x5d\x5f\x79\x98\xea\x62\xc6\xc2\x86\x28\xd2\xd3\x2a\xad\xe2\xf7\xb0\x11\x20\x43\x2e\xd5\x47\xc9\x4c\x38\x0c\x9d\x26\xa3\xd9\xa4\xe2\x0d\x94\x08\xad\x6c\xc9\x87\xbf\xe7\x16\x28\xe0\x41\xb2\x2a\xc9\x30\x25\x46\x93\x72\xc9\x59\xd1\x1c\xca\x86\xd3\xd5\x58\x0c\xc6\xc5\x1e\x2d\xf0\x78\x6d\x1f\xbb\x3a\xd9\x42\xfe\x1c\xae\x4e\x4c\x21\x9c\x03\x2c\x33\x59\xfd\x8b\xe0\xed\x8e\x35\xa5\xc7\x4b\x5f\x76\x22\x88\x9f\xd7\x49\x44\x12\x85\xf9\x1b\x9c\xfc\xf9\x8e\xcb\x78\x53\x92\x3f\x67\x3b\x2e\xe3\x2d\x98\xa7\x67\x55\x3e\x15\x25\x24\x32\xa0\x01\xa4\xe3\x0c\xa6\x2f\xd3\x1e\x6e\xc3\x74\x6c\x55\x1d\xe6\xc3\xe1\xb3\x4e\x60\x07\x70\xdb\x73\x75\x3f\x96\x39\xde\xa6\x3f\x95\xc9\x16\x3d\xb2\x93\x22\x66\x7d\xc5\x71\x6d\x92\x73\x12\xd6\xd8\x64\x52\x6b\xcd\xde\x50\x70\x48\x5b\x72\x22\x81\x9b\x54\xb8\xa5\xa2\x64\x21\xa5\xd5\xb6\xe4\x2f\x16\x3c\x37\xdd\x9f\x66\x1f\x7a\xd2\xec\x43\x17\x0c\x3a\xed\x3c\x88\x3d\xcb\xc1\xfd\x0b\x9d\xb0\xc5\xcc\xfd\x0f\xbd\xe9\x1b\x2f\x91\x76\xb7\xe8\x89\xae\xb9\x68\x4f\x45\x93\xcb\xf6\xf1\x91\x86\x47\x10\x78\x29\xd1\x33\x96\xed\x1d\x16\x07\x1d\x99\x4d\x27\x38\x7a\xe0\xad\xea\x69\x56\x06\xec\xab\xf6\x4d\xa7\x67\xb4\x95\x6a\xbd\xe5\x2f\x5f\x59\x3c\xca\xd6\xad\x54\x99\xdc\xf2\x97\x6c\xab\x51\x3f\xbf\xa9\xe5\x22\xd5\x4f\x42\x70\x31\xa0\x0b\x16\xef\x29\x07\xeb\x45\xda\x37\x54\x41\x93\x1f\x4e\xc5\x2b\x47\xf4\xd4\xa3\xfd\x22\xf9\x8f\x02\xe8\x73\xc1\x5f\x9a\xd3\x06\x9e\x02\xd5\x6b\x02\xd7\x59\xd4\xc8\x15\x93\x4a\xb0\xa7\x56\xa1\x49\x8d\xed\x14\x98\xed\x35\xd5\xab\xb9\xa8\xb5\x7b\xf7\xcc\x76\xc3\xa4\x3a\x6d\xcd\x3f\xc2\x65\x15\x93\xaa\xdf\x5c\xaf\xea\x64\x73\x57\x4c\xee\x2a\x7a\xb0\xf7\x1e\x9e\x2c\x2c\x18\xaf\x35\xec\xf3\x53\xcf\x74\xfe\x5d\xe1\x4e\xc0\x06\x04\x34\x31\x05\x98\x34\x9a\xed\x22\x8e\xef\x40\x12\xf3\xe9\x55\x82\x15\xf0\x7f\x10\xfc\x92\xb7\x4d\xfc\x14\xb6\xac\x80\xec\x0d\x04\xcf\x72\x8b\xfb\xb5\xa3\x6f\x3d\x93\x36\x1b\x5a\xc2\x5a\x51\xd5\x4a\x3d\x9a\xc9\xe3\x55\x6d\xc8\x4c\x1a\xd6\x4e\x45\xf2\x9e\x35\x56\x79\x71\x8b\xf8\x41\x6c\xa0\x45\xfb\x4c\x85\x1f\x79\xc6\x2a\xff\x5a\x8b\x78\xd1\x1a\x6a\x11\x2f\x61\x63\x95\x7f\xad\xc5\x64\xbf\x3d\xd4\x64\xb2\xfd\x1e\xad\x3e\x7d\x44\xa0\x82\xd6\x12\xa3\xf6\x30\x99\xe2\x3b\x5b\x3a\x7d\x1a\x5a\x73\x7c\x5d\x25\x79\xbc\xa8\x72\xcc\xa2\x77\x97\x88\x8e\xbe\xcd\x4d\x28\x98\x98\x8d\xb0\x09\xec\xf8\xd1\x58\x6e\x56\x64\xad\x68\xd2\x13\x53\xf4\x5d\x71\xdc\x88\xc8\xe8\x39\x70\xf8\x9b\x6f\xeb\x46\xa2\x6f\xdd\x14\xed\x4b\xbc\x27\xff\x20\x20\x73\xba\x83\xcb\x2d\x15\x34\xc7\xf7\x2a\x63\x8b\x29\x2f\x25\x04\xef\x2b\x5b\xf2\xab\xa7\xe7\x06\xc2\x40\x9f\x6d\xed\x73\xf6\xc4\xd3\x78\x77\xf6\x67\x00\x00\x00\xff\xff\x43\x07\x2e\x33\xcf\x20\x00\x00")

func tmplScreenboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScreenboardTmpl,
		"tmpl/screenboard.tmpl",
	)
}

func tmplScreenboardTmpl() (*asset, error) {
	bytes, err := tmplScreenboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/screenboard.tmpl", size: 8399, mode: os.FileMode(420), modTime: time.Unix(1573631928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplTimeboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x6e\xdb\x38\x10\xbe\xfb\x29\x06\x42\x0e\xbb\x40\xec\x07\x58\x20\x87\x6c\x02\x07\x0b\x6c\xdb\x34\x09\xd2\x43\x51\x08\xb4\x34\x52\x88\xea\x2f\x14\x95\xc4\x21\xf8\xee\x05\x87\xbf\x96\x15\xf7\x50\x9f\x38\xdf\x7c\xf3\xcb\x19\x5a\x02\xc7\x7e\x12\x05\x42\x56\x32\xc9\xca\xbe\xce\x25\x6f\x71\xd7\x33\x51\x66\x90\x95\x65\xae\x14\x6c\xfe\x2b\x41\xeb\x0c\xd4\x0a\x40\x72\xd9\x20\xd8\xdf\x05\x64\x46\xfb\x40\x90\xd6\xd9\x0a\xa0\xc4\xb1\x10\x7c\x90\xbc\xef\xbc\xfa\x3a\x81\x2c\x49\x20\x2b\xf3\xbe\x6b\xf6\xe4\xc3\x70\xee\x90\x95\x5f\x0c\xb0\xd6\x7a\x05\xa0\xd4\x2b\x97\x4f\xb0\xb9\x11\x6c\x78\x1a\x03\x28\x58\x57\x23\x6c\x80\xc4\xda\xe8\x8c\xf9\xca\xa4\x62\xd3\x5a\x48\x28\x3a\xbb\xc6\x8a\x77\x9c\xd2\xb0\x0e\x01\x5e\xf8\x7b\x2c\xe3\x91\xbf\x1b\x85\x37\x5a\x03\xaf\x60\x73\x39\xc9\x7e\x2c\x58\x83\x46\xc5\x82\xe0\x4c\xa2\x56\xeb\xcc\x98\x60\x57\x3a\xd7\xde\xc1\xad\xc0\x82\x8f\x2e\xe8\x10\x04\xe7\x20\x6a\x3f\x74\x70\x23\xfa\x69\xa0\x1e\xd4\xe6\x04\x17\xf0\x5d\xa9\xb3\xda\xa2\xff\x5c\x78\x82\xd6\xbe\x3f\x67\xbc\x2b\xf1\xed\x1c\xce\xb0\xc1\x76\xc6\xe0\x95\x53\x6b\x7d\xae\x14\x05\xcb\x94\x22\x26\x9d\x08\xf9\xb1\x9c\xc8\x7d\xd1\x0f\x48\x89\x8c\xe6\xe4\x12\x19\x2d\x6a\xc2\x58\xc2\xa9\x44\x22\xe3\x8f\x12\x91\x7b\x7b\x1f\x84\x8e\x24\xf9\x39\x00\x18\x58\x83\x52\xe2\xc1\x84\x92\xc5\xe6\xd6\x69\xfc\x1d\x07\x6e\x5e\x35\x7c\x58\xe4\x6e\x8d\xc2\xf3\xf5\x72\x3a\x9f\x98\xf8\x89\x82\x1a\x63\x20\x3b\x6c\x07\xa0\x9b\x5b\x67\xd7\x92\x2a\xc9\x58\xee\x07\x8c\xcb\x64\x84\x98\xe1\x0b\x6b\xa6\x30\x6e\x8f\x24\x44\xa5\x52\x94\xc0\xff\x6c\x87\x8d\x89\xd4\xd0\xc1\x91\x2d\x7a\x34\x56\xb1\x88\xe3\x43\x28\xcb\xd6\x70\x87\xcf\x13\x8e\x72\xb1\x08\x61\x75\x49\x15\xcf\x49\xbf\xbf\x4e\x28\xf6\x71\x99\x42\xa6\x54\xdc\x5a\x6b\xaa\x78\x56\xb0\x52\x26\x09\x70\xfe\x83\xc9\x65\x5d\x0b\xac\x99\xec\x85\x4d\xc3\x80\x1d\x42\x96\xc1\x5f\xd7\x78\x87\xd5\xbd\x14\xbc\xab\x53\xde\xdf\xb4\xaa\xd1\xcc\xef\x6a\x44\x42\x34\x72\x68\xa2\xae\xe7\x61\xc3\x8c\x29\xe5\xba\x61\x91\xc0\x9b\x8f\x9d\xb1\xa4\x7d\x77\x43\x66\xb6\xdd\x1d\xfd\xae\xc7\xf1\x3b\xec\x78\x34\xfe\xc6\x4b\xf9\x64\x4c\x5f\xe9\xe0\x0c\x2d\x7a\xc2\xec\x74\x5b\x0f\x6d\x92\x3a\x5d\xe1\xbe\x15\x41\x61\xc7\xfa\xaa\xef\x4a\x7a\x2d\x59\xb3\xed\x45\xcb\xe4\x08\xe9\x80\x7f\xa8\xf6\x8f\x74\x6c\x69\x11\xa9\x79\x45\xdc\x59\xdf\x20\x6d\xdc\xe9\xbe\x1d\xce\x88\xf1\xdd\x0e\x4c\xa4\xf7\x7c\x15\x91\x38\x7f\xb1\x2c\xbf\x43\xcb\x8b\x75\x1c\x20\xb4\x63\x1a\x65\xdf\xfe\x5b\x5f\xf5\x0d\x79\x2e\x48\xce\x77\x75\x5e\x10\xe2\xa3\xcf\x68\xbf\xf5\xb8\x9d\x7b\xac\x16\x3d\x6e\x3f\xf6\x98\x5e\x9c\x55\x2c\x9d\x56\x91\x7a\xbc\xef\xcb\x92\x76\xcf\x70\x8a\xc5\x01\x78\xc0\x76\x68\x98\xc4\x47\x26\x38\xdb\x35\x18\x1e\xc0\xe4\x5f\xda\x7c\x2f\x38\x5a\xfe\xe2\x78\xe1\xee\x3b\xd6\x62\xf2\x66\x7c\x36\xa2\xbf\xb1\x41\x60\xc5\xdf\x20\xf9\x9b\x34\xa2\xd7\x96\x58\xb1\xa9\x91\xf1\x03\xc3\x8a\xe6\x13\x65\x31\x6d\xbd\xfa\x15\x00\x00\xff\xff\x28\x2c\xc9\x86\xe6\x08\x00\x00")

func tmplTimeboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplTimeboardTmpl,
		"tmpl/timeboard.tmpl",
	)
}

func tmplTimeboardTmpl() (*asset, error) {
	bytes, err := tmplTimeboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/timeboard.tmpl", size: 2278, mode: os.FileMode(420), modTime: time.Unix(1573631928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/monitor.tmpl":     tmplMonitorTmpl,
	"tmpl/screenboard.tmpl": tmplScreenboardTmpl,
	"tmpl/timeboard.tmpl":   tmplTimeboardTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"monitor.tmpl":     &bintree{tmplMonitorTmpl, map[string]*bintree{}},
		"screenboard.tmpl": &bintree{tmplScreenboardTmpl, map[string]*bintree{}},
		"timeboard.tmpl":   &bintree{tmplTimeboardTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
